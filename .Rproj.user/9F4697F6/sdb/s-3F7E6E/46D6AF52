{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Tidy Data\"\nauthor: \"Steve Buyske\"\ndate: \"10/10/2016\"\noutput: ioslides_presentation\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, cache = TRUE)\nlibrary(tidyverse)\nuntidy_babynames <- read_delim(\"untidy-babynames.txt\", \" \")\nuntidy_flights <- read_table(\"untidy-flights.txt\")\nuntidy_flights2 <- read_table(\"untidy-flights-sc.txt\")\n\n\n```\n\n---\n\n\n\n## Tidy Data\n\nConsider different ways that the `flights` data could be organized\n\n```\n month day sched_dep_time carrier flight dep_delay arr_delay\n     1   1            515      UA   1545         2        11\n     1   1            529      UA   1714         4        20\n     1   1            540      AA   1141         2        33\n```\n\n---\n\nor\n\n```{r}\n untidy_flights\n```\n\n---\n\nor\n\n```{r}\nuntidy_flights2\n```\n\n\n---\n\nor\n\n```\n month day sched_dep_time carrier flight dep_delay\n     1   1            515      UA   1545         2\n     1   1            529      UA   1714         4\n     1   1            540      AA   1141         2\n```\n\nand\n\n```\n month day sched_dep_time carrier flight arr_delay\n     1   1            515      UA   1545        11\n     1   1            529      UA   1714        20\n     1   1            540      AA   1141        33\n```\n\n----\n\nor, switching datasets  (this way of storing data is *very* common, and is sometimes called \"wide\" format as opposed to \"tall\" or \"long\")\n\n```{r}\nuntidy_babynames\n```\n\n---\n\nAll of these contain the same information, but they are not all as easy to work with.\n\nOnly the first is *tidy*, and tidy data is by far the easiest form of data to work with.\n\nIn a tidy dataset, \n\n* Each variable must have its own column.\n* Each observation must have its own row.\n* Each value must have its own cell.\n\n\n<img src=\"http://r4ds.had.co.nz/images/tidy-1.png\" width=\"600\">\n\n---\n\nWe already have a variety of tools to convert datasets into tidy datasets, but we don't yet have a good way to handle the last dataset or the 2nd.\n\nTwo very useful functions in the `tidyr` package for such manipulations are `gather()` and `spread()`\n\n---\n\n## `gather()`\n\n`gather()` collapses multiple columns into \"key-value\" pairs (with the other columns duplicated) and is written to have a similar syntax to `select()`. It has three types of arguments.\n\n* The set of columns that represent values, not variables. For the `untidy_babynames` data frame those are the years from 2000 to 2005.\n* The name of the variable whose values form the column names. This is called the key, and would be something like `year` for the `untidy_babynames` data frame.\n* The name of the variable whose values are spread over the cells. This is called the key, and would be something like `n` or `count` for the `untidy_babynames` data frame.\n\n---\n\n```{r}\ngather(untidy_babynames, `2000`:`2005`, key = \"year\", value = \"count\")\n```\n\n---\n\n<img src=\"http://r4ds.had.co.nz/images/tidy-9.png\" width=\"900\">\n\n---\n\n## `spread()`\n\n`spread()` is the opposite of `gather()` and spreads a key-value pair across multiple columns.\n\nIt takes just key and value arguments.\n\n---\n\n```{r}\nuntidy_flights\n```\n\n---\n\n```{r}\nuntidy_flights %>% spread(key = delay_type, value = delay)\n```\n---\n\n```{r}\ntidy_babynames <-\n  gather(untidy_babynames, `2000`:`2005`, key = \"year\", value = \"count\")\nspread(tidy_babynames, key = year, value = count)\n```\n\n\n---\n\nWhat about data like `untidy_flights2`, where one column contains multiple values per cell? We could use string splitting functions\n```{r}\nlibrary(stringr)\nuntidy_flights2$dep_delay <-\n  as.integer(map_chr(str_split(untidy_flights2$delays, pattern = \";\"), 1))\nuntidy_flights2$arr_delay <-\n  as.integer(map_chr(str_split(untidy_flights2$delays, pattern = \";\"), 2))\nuntidy_flights2\n```\n\nbut this approach can be painful.\n\n---\n\n## `separate()`\n\nThe `separate()` function in the `tidyr` package provides an easier tool. It requires three arguments: data, column, and `into`. By default it splits on any non-numeric character, but the optional `sep` argument can also be used.\n\n```{r}\nuntidy_flights2 %>%\n  separate(delays, into = c(\"dep_delay_s\", \"arr_delay_s\"), convert = TRUE)\n```\n\n---\n  \n## `unite()`\n  \nTo paste together variables, you can use `apply()` and `paste()`, but there's a convenient function `unite()` as well. By default, `unite()` drops the variables that will be united.\n\n```{r}\nuntidy_flights2 %>%\n  unite(prefixed_flight, carrier, flight, sep = \":\")\n```\n\n---\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>If I had one thing to tell biologists learning bioinformatics, it would be &quot;write code for humans, write data for computers&quot;.</p>&mdash; Vince Buffalo (@vsbuffalo) <a href=\"https://twitter.com/vsbuffalo/statuses/358699162679787521\">July 20, 2013</a></blockquote>\n\n  \n```\n \n```\n\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>\nIf you are struggling to make a figure . . . stop and think hard about whether your data is __tidy__. Untidiness is a common, often overlooked cause of agony in data analysis and visualization.\n</p>&mdash; Jenny Bryan\n</blockquote>\n\n---\n\n## In class exercise\n\nWe are going to work through an example from Jenny Bryan. Consider the following tables showing the total number of words spoken by characters of different races and genders in the Lord of the Rings movies.\n\n```{r, echo = FALSE, message = FALSE, results = \"hide\"}\n\n\nif (!file.exists(file.path(\"data\", \"lotr_clean.tsv\"))) {\n  download.file(paste0(\"https://raw.githubusercontent.com/jennybc/\",\n                       \"lotr/master/lotr_clean.tsv\"), \n                destfile = file.path(\"data\", \"lotr_clean.tsv\"),\n                method = \"curl\")\n}\nlotr_dat <- read_tsv(file.path(\"data\", \"lotr_clean.tsv\"), col_types = cols(\n  Film = col_character(),\n  Chapter = col_character(),\n  Character = col_character(),\n  Race = col_character(),\n  Words = col_integer()\n))\n\nfemales <- c(\"Galadriel\", \"Arwen\", \"Lobelia Sackville-Baggins\", \"Rosie\",\n             \"Mrs. Bracegirdle\", \"Eowyn\", \"Freda\", \"Rohan Maiden\")\nlotr_dat <-\n  mutate(lotr_dat,\n         Gender = ifelse(Character %in% females, \"Female\", \"Male\"))\n\n(lotr_tidy <- lotr_dat %>%\n    filter(Race %in% c(\"Elf\", \"Hobbit\", \"Man\")) %>%\n    group_by(Film, Gender, Race) %>%\n    summarize(Words = sum(Words)))\n(all_combns <- lotr_tidy %>% \n    select(-Words) %>% \n    map(unique) %>% \n    crossing_())\nlotr_tidy <- left_join(all_combns, lotr_tidy) %>% \n  replace_na(list(Words = 0)) %>% \n  mutate(Film = factor(Film, levels = c(\"The Fellowship Of The Ring\",\n                                        \"The Two Towers\",\n                                        \"The Return Of The King\")),\n         Words = as.integer(Words)) %>% \n  arrange(Film, Race, Gender)\n## let the version from 02-gather.Rmd rule the day\n## non-substantive differences in row and/or variable order\n#write_csv(lotr_tidy, file.path(\"data\", \"lotr_tidy.csv\"))\nuntidy_films <- lotr_tidy %>% \n  split(.$Film) %>%\n  map(~ spread(.x, Gender, Words))\n## leaves files behind for lesson on how to tidy\nwalk2(untidy_films,\n      file.path(\"data\", paste0(gsub(\" \", \"_\", names(untidy_films)), \".csv\")),\n      ~ write_csv(.x, .y))\n## remove film name\nuntidy_films <- untidy_films %>% \n  map(~select(.x, -Film))\n## leaves files behind for exercises re: how to tidy\nuntidy_gender <- lotr_tidy %>% \n  split(.$Gender) %>% \n  map(~ spread(.x, key = Race, value = Words)) %>% \n  map(~ select(.x, Gender, everything()))\nwalk2(untidy_gender, file.path(\"data\", paste0(names(untidy_gender), \".csv\")),\n      ~ write_csv(.x, .y))\n```\n\n---\n\n```{r load-xtable, echo = FALSE}\nlibrary(xtable)\n```\n<table border = 1>\n<tr>\n<td>\n```{r results = 'asis', echo = FALSE}\nprint(xtable(untidy_films[[\"The Fellowship Of The Ring\"]],\n             digits = 0, caption = \"The Fellowship Of The Ring\"),\n      caption.placement = \"top\", include.rownames = FALSE, type = 'html')\n```\n</td>\n<td>\n```{r results = 'asis', echo = FALSE}\nprint(xtable(untidy_films[[\"The Two Towers\"]],\n             digits = 0, caption = \"The Two Towers\"),\n      caption.placement = \"top\", include.rownames = FALSE, type = 'html')\n```\n</td>\n<td>\n```{r results = 'asis', echo = FALSE}\nprint(xtable(untidy_films[[\"The Return Of The King\"]],\n             digits = 0, caption = \"The Return Of The King\"),\n      caption.placement = \"top\", include.rownames = FALSE, type = 'html')\n```\n</td>\n</tr>\n</table>\n\n---\n\nFrom these tables, you could answer questions like how many words did Hobbits speak overall, or for which movies did which race speak the most, but it would be annoying. These would be easy questions with tidy data.\n\n---\n\nStep 1. Get the data in a single data frame\n\n* Create 3 data frames (or tibbles) from these files\n    + `https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Fellowship_Of_The_Ring.csv`\n    + `https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Two_Towers.csv`\n    + `https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Return_Of_The_King.csv`\n    \n* Combine the 3 data frames using `bind_rows` (use `?bind_rows` if you need to see how to use it)\n\n* Take a look at what you have\n\n---\n\nStep 2. Tidy the combined data frame by making new variables \"Gender\" and \"Words\"\n\nStep 3. \n\n* How many words were spoken in each movie?\n* How many words were spoken by each gender in total?\n* How many words were spoken by each race in total?\n* Make a data frame with totals by race and movie, calling it `by_race_film`.\n* Plot the last set of results with\n```ggplot(by_race_film, aes(x = Film, y = Words, fill = Race)) + \n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    coord_flip() + guides(fill = guide_legend(reverse = TRUE))\n```\n\n---\n\nStep untidying\n\n* Use `spread()` to create a data frame with separate columns for `Elf`, `Hobbit`, and `Man`\n* Use `spread()` to create a data frame with separate columns for `Female` and `Male`\n* Use `spread()` and `unite()` to get one variable for each combination of Race and Gender\n\n",
    "created" : 1478492027366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1579158813",
    "id" : "46D6AF52",
    "lastKnownWriteTime" : 1477150412,
    "last_content_update" : 1477150412,
    "path" : "~/Documents/MSDS 597 Data Wrangling n Husbandary /Week5/Tidy-Data.rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}