{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to Version Control and Git(Hub)\"\nauthor: \"Steve Buyske\"\ndate: \"10/31/2016\"\noutput: ioslides_presentation\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\npre {\n  overflow-x: auto;\n}\npre code {\n  word-wrap: normal;\n  white-space: pre;\n}\n</style>\n---\n\n\n## Version control\n\n* A *Version control* system is a set of software designed to keep track of changes in documents\n* It allows one to go back to a previous version in case problems have been introduced\n* It facilitates working with others, providing a framework so that everyone can keep track of the various versions\n* *Git* is one implementation of a distributed version control system\n* *GitHub* is a commercial website where Git repositories can be uploaded (*Bitbucket* and *GitLab* are prominant alternatives)\n\n\n---\n\n## A conceptual introduction to Git \n\nIf you work on a project yourself, you might only use three commands after setting things up\n\n* `git add --all` to start tracking new files and  to stage changes to already tracked files\n* `git commit -am \"<message>\"` make a local snapshot of the files that you are tracking. Include a message to make clear what you've done since last time\n* `git push origin master` publish the latest local snapshot to a remote repository\n    + This last gives you a remote backup as well as potentially making your work available to others.\n    \n    \n---\n\nIf you work with other people, there are a few more commands and concepts\n\n* `git clone <url>` to get a local copy of a Git repository, whether just to examine or so you can  modify it.\n* `git fetch <alias>` to synchronize your repository with a remote repository, fetching all the files it has that you do not.\n* `git pull origin <branch>` to pull the most recent changes from a remote branch---if you’re working collaboratively and a repo was updated on GitHub but you don’t have the changes locally\ngit pull origin <branch>\n* Issue: a feature of GitHub often used for bug reports\n* Pull requests: Used to suggest a code revision via specific code\n\n---\n\nGit has big upfront costs (in terms of time and effort) but has many long term advantages. After a while it will become a natural part of your daily workflow\n    \n    \n---\n\n<div class=\"centered\">\n\n<img src=\"http://imgs.xkcd.com/comics/git.png\" width=\"400\">\n\n\n</div>\n\n\n---\n\n## Onward to details. First, potentially painful setup\n\n* Setup your free account at https://github.com\n    + Your free account will have public (as in anyone can view) repositories\n    + Later on, you can almost certainly arrange for unlimited private repositories via https://education.github.com/\n    + You can also pay for private repositories\n    \n---\n\n## Install Git\n\n* Is Git installed already? \n  + Open a terminal window (Command Prompt on Windows) and type `which git` on Mac and Linux or `where git` on Windows. If you get something like `/usr/bin/git` and not just an empty return, type `git --version`. If you get something like `git version 2.9.3` congratulations! You can ignore this slide and the next.\n      + Macintosh users might get something like `xcrun: error: invalid active developer path`. In that case just follow the next step\n      \n---      \n      \n* Install Git\n    + Macintosh users: In a terminal window, type `xcode-select --install` \n        + There are other options, such as `brew install git` or https://git-scm.com/downloads\n    + Windows users: Install from https://git-for-windows.github.io/\n    + Linux users: Install via a command like `sudo apt-get install git`\n    \n    \n\n\n---\n\n## Setup your Git profile\n\nIn the terminal window, type (using your own name and the email address you used for your GitHub account)\n\n```\ngit config --global user.name 'Steve Buyske'\ngit config --global user.email 'buyske@stat.rutgers.edu'\ngit config --global --list\n```\n\n---\n\n## Test Run Part 1: Make a Repository on GitHub\n\n1. Log in to https://github.com\n1. Click green “New repository” button\n1. Make a name, select Public and choose Yes to initialize with a README\n1. Click the green button says \"Create repository\"\n1, Copy the address to clone using the green “Clone or Download” button\n\n---\n\n## Clone the directory to your local machine\n\n1. Open up a terminal window\n1. Possibly change directories\n1. Type `git clone  <the URL you copied>`\n1. When Git is done\n    + `cd <repository name>`\n    + `ls`\n    + `cat README.md`\n    + `git remote show origin`\n\n---\n\n## Make changes locally\n\n1. Add a line to the README file and check how Git feels about that\n    + `echo \"A line I wrote on my local computer\" >> README.md` (or any other way to change the file)\n    + `git status`\n1. Use `git add -A` to track all the files in the directory\n1. Type `git commit -m \"My first commit\"` to commit your changes (save a snapshot locally) with an informative message\n1. Type `git push` to upload the snapshot to GitHub\n\n\n\n## Confirm that the local change has shown up on the GitHub remote\n\n1. Refresh your browser window that still (?) open to the GitHub repository\n1. Refresh\n1. The README should show the new line\n1. The clicking on \"commits\" should show the one with your commit message\n\n\n\n---\n\n## Git and RStudio\n\n1. Even if you already have files, first set up the repository on GitHub.\n1. In Rstudio, choose File > New Project > Version Control > Git. Put the URL of the GitHub repo in \"repository URL\", make up a local directory name, and select the directory in which that directory will sit\n1. Click \"Open in new session\" and then \"Create Project\"\n1. If you have files that you have already been working on, move them into the newly created directory\n\n---\n\n## Git and Rstudio Workflow 1/2\n\n* Every time you've made important changes (think many times a day) you should commit your changes:\n    + Open the \"Git\" panel\n    + Click the \"Staged\" box for files that you want to commit\n    + Click \"Commit\"\n    + Type a message in the \"Commit message\" box\n    + Click \"Commit\"\n    \n---    \n    \n## Git and Rstudio Workflow 2/2\n  \n* Push your changes to GitHub less often than commits, but still frequently (think a few times a day) and certainly when you are done with a project for a while\n    + First click the blue \"Pull\"\" button in the \"Git\"\" tab (in RStudio). This will incorporate any changes a collaborator might have made before you push your changes to GitHub\n    + Next click the green \"Push\"\" button to upload your local changes to GitHub. \n    \n    \n---\n\n## Avoiding retyping your password: credentials or ssh-key {.smaller}\n\n\n* Turn on the credential helper\n   + Macintosh: \n       + Try `git credential-osxkeychain` to be sure that  you get a message like `usage: git credential-osxkeychain <get|store|erase>`\n       + Type `git config --global credential.helper osxkeychain`\n   + Linux:\n       + Type `git config --global credential.helper 'cache --timeout=10000000'` which will store your password for 10000000 seconds\n   + Windows\n       + In the shell, type `git config --global credential.helper wincred`\n       + If that fails, download and run the [Git Credential Manager for Windows](https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.8.0) \n* The next time you are asked for your account and password should be your last\n* To instead use an ssh-key, see http://r-pkgs.had.co.nz/git.html#git-init, Initial set up, steps 4 and 5\n\n\n\n   \n---\n\n## GitHub and Collaboration\n\nWe will discuss this next week\n\n---\n\n## Git(Hub) Graphical Interface Clients\n\n* RStudio (limited functionality, but suits me fine)\n* GitKraken (Windows, Mac, Linux) https://www.gitkraken.com/\n* SourceTree (Window, Mac) http://www.sourcetreeapp.com/\n* Don't use the GitHub client, which is too restrictive in its attempt to make things easy.\n\n\n\n\n\n---\n\n* This material is *heavily* drawn from Jenny Bryan's work at http://happygitwithr.com\n* Hadley Wickham also has a nice condensed set of instructions at http://r-pkgs.had.co.nz/git.html\n\n\n\n<div class=\"centered\">\n\n<img src=\"http://imgs.xkcd.com/comics/git_commit.png\" width=\"550\">\n\n\n</div>\n\n\n\n",
    "created" : 1478504580500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3035786458",
    "id" : "2FB82E95",
    "lastKnownWriteTime" : 1478504789,
    "last_content_update" : 1478504789430,
    "path" : "~/Documents/MSDS 597 Data Wrangling n Husbandary /Week7/intro-to-github.rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}